#! /bin/sh
# configure package install

NAME=txt2man
VERSION=1.6.0-1

# [call name]
BIN=$(basename "$0")

# [exit codes]
SUCCESS=0
FAILURE=1
ERROR=2
#BUG=10

usage()
{
cat << EOT
Usage: ${BIN} [OPTION]... [VAR=VALUE]...

Defaults for the options are specified in brackets.

Options:
  -h, --help                display usage guide

  Installation directories:
    By default, \`make install' will install all the files in
    \`/usr/local/bin', \`/usr/local/lib' etc.  You can specify
    an installation prefix other than \`/usr/local' using \`--prefix',
    for instance \`--prefix=$HOME'.

    --prefix=PREFIX         installation prefix [/usr/local]
    
  For better control, use the options below.

  Fine tuning of the installation directories:
    --bindir=DIR            user executables [EPREFIX/bin]
    --mandir=DIR            man documentation [DATAROOTDIR/man]
    --docdir=DIR            documentation root [DATAROOTDIR/doc/${NAME}]
    --htmldir=DIR           html documentation [DOCDIR]
    --pdfdir=DIR            pdf documentation [DOCDIR]
    --psdir=DIR             ps documentation [DOCDIR]
EOT
exit
}

optparse()
{
	# user override vars
	while test $# -gt 0
	do
	    case $1 in
	    -h|--help) usage;;

	    --prefix) PREFIX=${2}; shift 2;;
	    --prefix=?*) PREFIX=${1#--prefix=}; shift;;
        
	    --exec-prefix) EXEC_PREFIX=${2}; shift 2;;
	    --exec-prefix=?*) EXEC_PREFIX=${1#--exec_prefix=}; shift;;

	    --bindir) BINDIR=${2}; shift 2;;
	    --bindir=?*) BINDIR=${1#--bindir=}; shift;;

	    --sbindir) SBINDIR=${2}; shift 2;;
	    --sbindir=?*) SBINDIR=${1#--sbindir=}; shift;;

	    --libexecdir) LIBEXECDIR=${2}; shift 2;;
	    --libexecdir=?*) LIBEXECDIR=${1#--libexecdir=}; shift;;

	    --sysconfdir) SYSCONFDIR=${2}; shift 2;;
	    --sysconfdir=?*) SYSCONFDIR=${1#--sysconfdir=}; shift;;

	    --sharedstatedir) SHAREDSTATEDIR=${2}; shift 2;;
	    --sharedstatedir=?*) SHAREDSTATEDIR=${1#--sharedstatedir=}; shift;;

	    --localstatedir) LOCALSTATEDIR=${2}; shift 2;;
	    --localstatedir=?*) LOCALSTATEDIR=${1#--localstatedir=}; shift;;

	    --libdir) LIBDIR=${2}; shift 2;;
	    --libdir=?*) LIBDIR=${1#--libdir=}; shift;;

	    --includedir) INCLUDEDIR=${2}; shift 2;;
	    --includedir=?*) INCLUDEDIR=${1#--includedir=}; shift;;

	    --oldincludedir) OLDINCLUDEDIR=${2}; shift 2;;
	    --oldincludedir=?*) OLDINCLUDEDIR=${1#--oldincludedir=}; shift;;

	    --datarootdir) DATAROOTDIR=${2}; shift 2;;
	    --datarootdir=?*) DATAROOTDIR=${1#--datarootdir=}; shift;;

	    --datadir) DATADIR=${2}; shift 2;;
	    --datadir=?*) DATADIR=${1#--datadir=}; shift;;

	    --infodir) INFODIR=${2}; shift 2;;
	    --infodir=?*) INFODIR=${1#--infodir=}; shift;;

	    --localedir) LOCALEDIR=${2}; shift 2;;
	    --localedir=?*) LOCALEDIR=${1#--localedir=}; shift;;

	    --mandir) MANDIR=${2}; shift 2;;
	    --mandir=?*) MANDIR=${1#--mandir=}; shift;;

	    --docdir) DOCDIR=${2}; shift 2;;
	    --docdir=?*) DOCDIR=${1#--docdir=}; shift;;

	    --htmldir) HTMLDIR=${2}; shift 2;;
	    --htmldir=?*) HTMLDIR=${1#--htmldir=}; shift;;

	    --dvidir) DVIDIR=${2}; shift 2;;
	    --dvidir=?*) DVIDIR=${1#--dvidir=}; shift;;

	    --pdfdir) PDFDIR=${2}; shift 2;;
	    --pdfdir=?*) PDFDIR=${1#--pdfdir=}; shift;;

	    --psdir) PSDIR=${2}; shift 2;;
	    --psdir=?*) PSDIR=${1#--psdir=}; shift;;

	    --) shift; break;;
	    *) echo "$BIN: ${1}: invalid option"; exit "$ERROR";;
	    esac
	done

	# init option vars
	# (newer datarootdir standard)
	: "${PREFIX:=/usr/local}"
	: "${EXEC_PREFIX:=${PREFIX}}"
	: "${BINDIR:=${EXEC_PREFIX}/bin}"
	: "${SBINDIR:=${EXEC_PREFIX}/sbin}"
	: "${LIBEXECDIR:=${EXEC_PREFIX}/libexec}"
	: "${SYSCONFDIR:=${PREFIX}/etc}"
	: "${SHAREDSTATEDIR:=${PREFIX}/com}"
	: "${LOCALSTATEDIR:=${PREFIX}/var}"
	: "${LIBDIR:=${EXEC_PREFIX}/lib}"
	: "${INCLUDEDIR:=${PREFIX}/include}"
	: "${OLDINCLUDEDIR:=/usr/include}"
	: "${DATAROOTDIR:=${PREFIX}/share}"
	: "${DATADIR:=${DATAROOTDIR}}"
	: "${INFODIR:=${DATAROOTDIR}/info}"
	: "${LOCALEDIR:=${DATAROOTDIR}/locale}"
	: "${MANDIR:=${DATAROOTDIR}/man}"
	: "${DOCDIR:=${DATAROOTDIR}/doc/${NAME}}"
	: "${HTMLDIR:=${DOCDIR}}"
	: "${DVIDIR:=${DOCDIR}}"
	: "${PDFDIR:=${DOCDIR}}"
	: "${PSDIR:=${DOCDIR}}"
}

generateMakefile()
{
	cat > Makefile << EOF
#!/usr/bin/make -f
# txt2man Makefile
# Generated by configure (Do not edit.)

NAME = ${NAME}
VERSION = ${VERSION}

bindir = ${BINDIR}
mandir = ${MANDIR}
htmldir = ${HTMLDIR}
pdfdir = ${PDFDIR}
psdir = ${PSDIR}

BIN = src2man bookman txt2man
MAN1 = src2man.1 txt2man.1 bookman.1
HTML = src2man.1.html txt2man.1.html bookman.1.html
PDF = src2man.1.pdf txt2man.1.pdf bookman.1.pdf
PS = src2man.1.ps txt2man.1.ps bookman.1.ps

all: \$(BIN) \$(MAN1)
html: \$(HTML)
pdf: \$(PDF)
ps: \$(PS)

install: \$(MAN1)
	install -d \$(DESTDIR)\$(bindir)
	install -d \$(DESTDIR)\$(mandir)/man1
	install \$(BIN) \$(DESTDIR)\$(bindir)
	install \$(MAN1) \$(DESTDIR)\$(mandir)/man1

install-html: \$(HTML)
	install -d \$(DESTDIR)\$(htmldir)
	install \$(HTML) \$(DESTDIR)\$(htmldir)

install-pdf: \$(PDF)
	install -d \$(DESTDIR)\$(pdfdir)
	install \$(PDF) \$(DESTDIR)\$(pdfdir)

install-ps: \$(PS)
	install -d \$(DESTDIR)\$(psdir)
	install \$(PS) \$(DESTDIR)\$(psdir)

uninstall:
	cd \$(DESTDIR)\$(bindir) && rm -f \$(BIN)
	cd \$(DESTDIR)\$(mandir)/man1 && rm -f \$(MAN1)
	-cd \$(DESTDIR)\$(htmldir) && -rm -f \$(HTML)
	-cd \$(DESTDIR)\$(pdfdir) && -rm -f \$(PDF)
	-cd \$(DESTDIR)\$(psdir) && -rm -f \$(PS)

clean:
	rm -f *.1 *.txt *.ps *.pdf *.html

distclean: clean
	rm -f Makefile *.tar.gz *.zip
	rm -fr \$(NAME)-\$(VERSION)

distcheck:
	@echo "Implement Me!"

dist: all
	rm -fr \$(NAME)-\$(VERSION)
	mkdir  \$(NAME)-\$(VERSION)
	cp -a configure \$(NAME)-\$(VERSION)
	cp -a \$(BIN) \$(NAME)-\$(VERSION)
	cp -a \$(MAN1) \$(NAME)-\$(VERSION)
	cp -a COPYING README Changelog \$(NAME)-\$(VERSION)
	
	tar -cvzf \$(NAME)-\$(VERSION).tar.gz \$(NAME)-\$(VERSION)
	
	@if test \$\$? -eq 0 ;\\
	then \\
	    echo ============================================= ;\\
	    echo "Archive ready: \$(NAME)-\$(VERSION).tar.gz"  ;\\
	    echo ============================================= ;\\
	else \\
	    exit $FAILURE ;\\
	fi
	
	zip -r9 \$(NAME)-\$(VERSION).zip \$(NAME)-\$(VERSION)
	
	@if test \$\$? -eq 0 ;\\
	then \\
	    echo ============================================= ;\\
	    echo "Archive ready: \$(NAME)-\$(VERSION).zip"     ;\\
	    echo ============================================= ;\\
	else \\
	    exit $FAILURE ;\\
	fi

help:
	@echo "Please use 'make [<target>]' where <target> is one of:"
	@echo "  === USER TARGETS ==="
	@echo "  all                   # Build all files"
	@echo "  html                  # Build html docs"
	@echo "  pdf                   # Build pdf docs"
	@echo "  ps                    # Build ps docs"
	@echo "  clean                 # Remove build files"
	@echo "  install               # Install all files"
	@echo "  install-html          # Install html docs"
	@echo "  install-pdf           # Install pdf docs"
	@echo "  install-ps            # Install ps docs"
	@echo "  uninstall             # Uninstall all files"
	@echo "  === DEVELOPER TARGETS ==="
	@echo "  dist                  # Make distibution"
	@echo "  distcheck             # Test distibution"
	@echo "  distclean             # Remove all files"

.PHONY: clean dist distclean distcheck uninstall install all html ps pdf help

%.1:%.txt; ./txt2man -s 1 -t \$* -r "\${NAME} \${VERSION}" \$< >\$@
%.txt:%; ./\$< -h 2>&1 >\$@
#%.1.html:%.1; rman -f HTML \$< >\$@
%.1.html:%.1; man2html \$< >\$@
%.1.ps:%.1; groff -man \$< >\$@
%.1.pdf:%.1.ps; ps2pdf \$< >\$@

EOF
}

# [Fancy colors used to beautify the output a bit]
if [ "$NOCOLOR" ] ; then
    NORMAL=""
    BOLD=""
    RED=""
    YELLOW=""
    GREEN=""
else
    NORMAL='\033[0m'
    BOLD='\033[01;1m'
    RED='\033[01;91m'
    YELLOW='\033[00;33m'
    GREEN='\033[01;92m'
fi

main()
{
	if generateMakefile ; then
	    printf "%b'configure' finished successfully%b\n" "$GREEN" "$NORMAL"
	    printf "%b${NAME} ${VERSION}\n" "$BOLD"
	    printf "%bInstall ${NAME} in\t\t\t : %b${PREFIX}\n" "$NORMAL" "$GREEN"
	    printf "%bNow type %bmake %b<%btarget%b>\n" "$NORMAL" "$GREEN" "$NORMAL" "$GREEN" "$NORMAL"
	    printf "    where the optional <%btarget%b> is:\n" "$GREEN" "$NORMAL"
	    printf "      all              - build all binaries\n"
	    printf "      install          - install everything\n"
	    printf "      help             - display usage guide\n"
	    exit "$SUCCESS" 
	else
	    printf "%bOops! something went wrong.\n" "$RED"
	    printf "%bI don't know what, but you better fix it.%b\n" "$YELLOW" "$NORMAL"
	    printf "%bGood Luck...%b\n" "$BOLD" "$NORMAL"
	    exit "$FAILURE"
	fi
}

optparse "$@"
main
